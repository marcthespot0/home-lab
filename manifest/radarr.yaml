---
kind: Namespace
apiVersion: v1
metadata:
  name: radarr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr-deployment
  namespace: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      volumes:
      - name: appdata
        persistentVolumeClaim:
          claimName: transmission-data
      - name: media
        persistentVolumeClaim:
          claimName: jellyfin-downloads
      containers:
      - name: radarr
        image: binhex/arch-radarr
        resources:
          requests:
            memory: "4G"
          limits:
            memory: "4G"
        ports:
        - containerPort: 7878
        env:
        - name: UMASK
          value: "000"
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        volumeMounts:
        - mountPath: "/Media"
          subPath: "Movies"
          name: media
        # - mountPath: "/nzb"
        #   subPath: "Downloads"
        #   name: media
        - mountPath: "/data"
          subPath: "/var/lib/transmission-daemon/downloads"
          name: appdata
        - mountPath: "/config"
          subPath: "transmission/radarr/config"
          name: appdata
---
apiVersion: v1
kind: Service
metadata:
  name: radarr-service
spec:
  selector:
    app: radarr
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 7878
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jellyfin-downloads
  namespace: radarr
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: transmission-data
  namespace: radarr
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: radarr
#   namespace: radarr
#   annotations:
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
# spec:
#   ingressClassName: ingress-nginx-internal
#   rules:
#   - host: radarr.<path:stringreplacesecret#domain>
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: radarr-service
#             port:
#               number: 7878
# ---
# apiVersion: gateway.networking.k8s.io/v1
# kind: HTTPRoute
# metadata:
#   name: radarr
#   namespace: radarr
#   annotations:
#     argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
# spec:
#   parentRefs:
#   - name: internal
#     namespace: gateway
#     sectionName: https
#   hostnames:
#   - "radarr".<path:stringreplacesecret#domain>"
#   rules:
#   - backendRefs:
#     - name: radarr-service
#       port: 80
# ---
# apiVersion: externaldns.k8s.io/v1alpha1
# kind: DNSEndpoint
# metadata:
#   name: radarr
#   namespace: media
#   annotations:
#     external-dns.custom/type: private
#     argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
# spec:
#   endpoints:
#     - dnsName: radarr.<path:stringreplacesecret#domain>
#       recordType: CNAME
#       targets:
#         - intgw.<path:stringreplacesecret#domain>
#       providerSpecific:
#         - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
#           value: "false"