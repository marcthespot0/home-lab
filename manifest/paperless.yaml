---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: paperless-secret
  namespace: paperless
  labels:
    app.kubernetes.io/part-of: paperless
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        PAPERLESS_VAR_USER: "{{ .paper_username }}"
        PAPERLESS_VAR_PASS: "{{ .paper_password }}"
  data:
    - secretKey: paper_username
      remoteRef:
        key: paperless-secret
        property: paper_user
    - secretKey: paper_password
      remoteRef:
        key: paperless-secret
        property: paper_pass
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: paperless
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: paperless
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: paperless-consume
  namespace: paperless
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: paperless-media
  namespace: paperless
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: paperless-data
  namespace: paperless
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paperless
  namespace: paperless
  labels:
    app: paperless
spec:
  replicas: 1
  selector:
    matchLabels:
      app: paperless
  template:
    metadata:
      labels:
        app: paperless
    spec:
      volumes:
        - name: paperless-data
          persistentVolumeClaim:
            claimName: paperless-data
        - name: paperless-media
          persistentVolumeClaim:
            claimName: paperless-media
        - name: paperless-consume
          persistentVolumeClaim:
            claimName: paperless-consume
      containers:
        - name: paperless
          image: ghcr.io/paperless-ngx/paperless-ngx:2.10.2
          ports:
            - containerPort: 8000
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: "/data/data"
              name: paperless-data
            - mountPath: "/data/media"
              name: paperless-media
            - mountPath: "/data/consume"
              name: paperless-consume
          env:
            - name: PAPERLESS_REDIS
              value: "redis://redis:6379"
            - name: PAPERLESS_DATA_DIR
              value: "/data/data"
            - name: PAPERLESS_MEDIA_ROOT
              value: "/data/media"
            - name: PAPERLESS_CONSUMPTION_DIR
              value: "/data/consume"
            - name: PAPERLESS_ADMIN_USER
              valueFrom:
                secretKeyRef: paperless-secret
                key:  "{{PAPERLESS_VAR_USER}}"
            - name: PAPERLESS_ADMIN_PASSWORD
              valueFrom:
                secretRef: paperless-secret
                key: "{{PAPERLESS_VAR_PASS}}"
            - name: PAPERLESS_URL
              value: "https://paperless.<path:stringreplacesecret#domain>"
            - name: PAPERLESS_BIND_ADDR
              value: "0.0.0.0"
            - name: PAPERLESS_PORT
              value: "8000"
---
kind: Service
apiVersion: v1
metadata:
  name: paperless
  namespace: paperless
spec:
  selector:
    app: paperless
  ports:
    - port: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: paperless
  namespace: paperless
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: paperless.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: paperless
            port:
              number: 8000
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: paperless
  namespace: paperless
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "paperless.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: paperless
      port: 8000
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: paperless
  namespace: paperless
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: paperless.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"