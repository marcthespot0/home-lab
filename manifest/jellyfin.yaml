---
kind: Namespace
apiVersion: v1
metadata:
  name: media
---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin
  namespace: media
  labels:
    app.kubernetes.io/name: jellyfin
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8096
  selector:
    app.kubernetes.io/name: jellyfin
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jellyfin-downloads
  namespace: media
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: media
  labels:
    app.kubernetes.io/name: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jellyfin
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
  template:
    metadata:
      namespace: media
      labels:
        app.kubernetes.io/name: jellyfin
    spec:
      restartPolicy: Always
      containers:
        - name: jellyfin
          image: jellyfin/jellyfin:10.8.13
          resources:
            requests:
              memory: 1000Mi
              cpu: 1000m
            limits:
              memory: 2000Mi
              cpu: 3000m
          ports:
            - containerPort: 8096
          readinessProbe:
            httpGet:
              path: /health
              port: 8096
            initialDelaySeconds: 10
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health
              port: 8096
            initialDelaySeconds: 30
            periodSeconds: 120
          volumeMounts:
            - name: jellyfin-config
              mountPath: /config
            - name: jellyfin-cache
              mountPath: /cache
            - name: jellyfin-downloads
              mountPath: /downloads
      volumes:
        - name: jellyfin-config
          persistentVolumeClaim:
            claimName: jellyfin-config
        - name: jellyfin-cache
          emptyDir: {}
        - name: jellyfin-downloads
          persistence:
            existingClaim: jellyfin-downloads
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        nvidia.com/gpu.present: "false"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jellyfin
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: jellyfin.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jellyfin
            port:
              number: 8096
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: jellyfin
  namespace: media
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "jellyfin.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: jellyfin
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: jellyfin
  namespace: media
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: jellyfin.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"