
---
kind: Namespace
apiVersion: v1
metadata:
  name: qbittorrent
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qbittorrent-configmap
  namespace: qbittorrent
data:
  qBittorrent.conf: |
    [AutoRun]
    enabled=false
    program=

    [BitTorrent]
    Session\DefaultSavePath=/downloads/
    Session\Port=6881
    Session\QueueingSystemEnabled=true
    Session\TempPath=/downloads/incomplete/

    [LegalNotice]
    Accepted=true

    [Meta]
    MigrationVersion=6

    [Network]
    Cookies=@Invalid()
    PortForwardingEnabled=false
    Proxy\HostnameLookupEnabled=false
    Proxy\Profiles\BitTorrent=true
    Proxy\Profiles\Misc=true
    Proxy\Profiles\RSS=true

    [Preferences]
    Connection\PortRangeMin=6881
    Connection\UPnP=false
    Downloads\SavePath=/downloads/
    Downloads\TempPath=/downloads/incomplete/
    WebUI\Address=*
    WebUI\ServerDomains=*
    WebUI\CSRFProtection=false
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: qbittorrent
  namespace: qbittorrent
  labels:
    app.kubernetes.io/part-of: qbittorrent
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        QBIT_VAR_VPN_USERNAME:  "{{ .vpn_user }}"
        QBIT_VAR_VPN_PASSWORD:  "{{ .vpn_pass }}"
  data:
    - secretKey: vpn_user
      remoteRef:
        key: qbittorrent
        property: OPENVPN_USERNAME
    - secretKey: vpn_pass
      remoteRef:
        key: qbittorrent
        property: OPENVPN_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent
  namespace: qbittorrent
spec:
  type: ClusterIP
  selector:
    app: qbittorrent
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: qbittorent
#   namespace: qbittorrent
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: qbittorrent
#   template:
#     metadata:
#       labels:
#         app: qbittorrent
#     spec:
#       enableServiceLinks: true
#       serviceAccountName: default
#       automountServiceAccountToken: true
#       securityContext:
#         fsGroup: 1000
#       hostIPC: false
#       hostNetwork: false
#       hostPID: false
#       dnsPolicy: ClusterFirst
#       containers:
#         - name: qbittorrent
#           image: lscr.io/linuxserver/qbittorrent:4.6.2
#           env:
#           - name: PUID
#             value: "1000"
#           - name: PGID
#             value: "100"
#           - name: TZ
#             value: "American/New_York"
#           - name: UMASK_SET
#             value: "022"
#           - name: WEBUI_PORT
#             value: "8080"
#           volumeMounts:
#             - mountPath: /config
#               name: qbittorrent-config
#               subPath: qbittorrent/config
#             - mountPath: /data
#               name: qbittorrent-data
#         - name: gluten
#           image: qmcgaw/gluetun:latest
#           env:
#           - name: VPN_SERVICE_PROVIDER
#             value: "expressvpn"
#           - name: FIREWALL_OUTBOUND_SUBNETS
#             value: "192.168.1.0/24"
#           - name: OPENVPN_USER
#             value: "{{ .vpn_user }}"
#           - name: OPENVPN_PASSWORD
#             value: "{{ .vpn_user }}"
#           securityContext:
#             privileged: true
#             allowPrivilegeEscalation: true
#             capabilities:
#               add:
#                 - NET_ADMIN
#           volumeMounts:
#             - mountPath: /config
#               name: qbittorrent-config
#               subPath: gluetun/config
#       volumes:
#         - name: qbittorrent-config
#           persistentVolumeClaim:
#             claimName: qbittorrent-config
#         - name: qbittorrent-data
#           persistentVolumeClaim:
#             claimName: qbittorrent-data
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: qbittorrent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qbittorrent
  template:
    metadata:
      labels:
        app: qbittorrent
    spec:
      containers:
        - name: qbittorrent
          image: lscr.io/linuxserver/qbittorrent:20.04.1
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "100"
            - name: TZ
              value: "American/New_York"
            - name: UMASK_SET
              value: "022"
            - name: WEBUI_PORT
              value: "8080"
          volumeMounts:
            - mountPath: /config/qBittorrent     # Mount at the desired path
              name: qbittorrent-config-volume    # Use a different name for the volume
              readOnly: true                     # Set read-only as ConfigMaps are immutable
              subPath: qBittorrent.conf          # Specify the specific file
        - name: gluten
          image: qmcgaw/gluetun:latest
          env:
            - name: VPN_SERVICE_PROVIDER
              value: "expressvpn"
            - name: FIREWALL_OUTBOUND_SUBNETS
              value: "192.168.1.0/24"
            - name: OPENVPN_USER
              value: "{{ .vpn_user }}"
            - name: OPENVPN_PASSWORD
              value: "{{ .vpn_user }}"
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - mountPath: /config/gluetun     # Mount at the desired path
              name: gluetun-config-volume    # Use a different name for the volume
              readOnly: true                 # Set read-only as ConfigMaps are immutable
              subPath: gluetun/config        # Specify the specific file
      volumes:
        - name: qbittorrent-config-volume        # Define the volume name
          configMap:
            name: qbittorrent-configmap         # Reference the ConfigMap
        - name: gluetun-config-volume            # Define the volume name for gluetun
          emptyDir: {}                          # Use an emptyDir volume as gluetun configuration might not be available as a ConfigMap
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: qbittorrent
  name: qbittorrent-config
  namespace: qbittorrent
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi
--- 
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: qbittorrent-data
  namespace: qbittorrent
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qbittorrent
  namespace: qbittorrent
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: qbittorrent.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: qbittorrent
            port:
              number: 8080
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: qbittorrent
  namespace: qbittorrent
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "qbittorrent.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: qbittorent
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: qbittorrent
  namespace: qbittorrent
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: qbittorrent.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"