---
kind: Namespace
apiVersion: v1
metadata:
  name: invidious
---
# Source: invidious/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: invidious-postgresql
  namespace: invidious
  labels:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: invidious
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: invidious/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: invidious-postgresql
  namespace: invidious
  labels:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
automountServiceAccountToken: false
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: invidious-configsecrets
  namespace: invidious
  labels:
    app.kubernetes.io/part-of: invidious
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        password: "{{ .password }}"
        POSTGRES_PASSWORD: "{{ .pass }}"
  data:
    - secretKey: password
      remoteRef:
        key: invidious-configsecrets
        property: PASSWORD
    - secretKey: pass
      remoteRef:
        key: invidious-configsecrets
        property: POSTGRES_PASSWORD
---
# Source: invidious/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: invidious
  labels:
    helm.sh/chart: invidious-2.0.4
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/version: "v2.20240427"
    app.kubernetes.io/managed-by: Helm
stringData:
  INVIDIOUS_CONFIG: |
    channel_threads: 1
    db:
      dbname: invidious
      host: invidious-postgresql
      password: mts
      port: 5432
      user: mts
    domain: ""
    feed_threads: 1
    full_refresh: false
    https_only: false
    port: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invidious-postgresql-init
data:
  annotations.sql: |
    -- Table: public.annotations

    -- DROP TABLE public.annotations;

    CREATE TABLE IF NOT EXISTS public.annotations
    (
      id text NOT NULL,
      annotations xml,
      CONSTRAINT annotations_id_key UNIQUE (id)
    );

    GRANT ALL ON TABLE public.annotations TO current_user;
  channel_videos.sql: |+
    -- Table: public.channel_videos

    -- DROP TABLE public.channel_videos;

    CREATE TABLE IF NOT EXISTS public.channel_videos
    (
      id text NOT NULL,
      title text,
      published timestamp with time zone,
      updated timestamp with time zone,
      ucid text,
      author text,
      length_seconds integer,
      live_now boolean,
      premiere_timestamp timestamp with time zone,
      views bigint,
      CONSTRAINT channel_videos_id_key UNIQUE (id)
    );

    GRANT ALL ON TABLE public.channel_videos TO current_user;

    -- Index: public.channel_videos_ucid_idx

    -- DROP INDEX public.channel_videos_ucid_idx;

    CREATE INDEX IF NOT EXISTS channel_videos_ucid_idx
      ON public.channel_videos
      USING btree
      (ucid COLLATE pg_catalog.invidious);

  channels.sql: |+
    -- Table: public.channels

    -- DROP TABLE public.channels;

    CREATE TABLE IF NOT EXISTS public.channels
    (
      id text NOT NULL,
      author text,
      updated timestamp with time zone,
      deleted boolean,
      subscribed timestamp with time zone,
      CONSTRAINT channels_id_key UNIQUE (id)
    );

    GRANT ALL ON TABLE public.channels TO current_user;

    -- Index: public.channels_id_idx

    -- DROP INDEX public.channels_id_idx;

    CREATE INDEX IF NOT EXISTS channels_id_idx
      ON public.channels
      USING btree
      (id COLLATE pg_catalog.invidious);

  nonces.sql: |+
    -- Table: public.nonces

    -- DROP TABLE public.nonces;

    CREATE TABLE IF NOT EXISTS public.nonces
    (
      nonce text,
      expire timestamp with time zone,
      CONSTRAINT nonces_id_key UNIQUE (nonce)
    );

    GRANT ALL ON TABLE public.nonces TO current_user;

    -- Index: public.nonces_nonce_idx

    -- DROP INDEX public.nonces_nonce_idx;

    CREATE INDEX IF NOT EXISTS nonces_nonce_idx
      ON public.nonces
      USING btree
      (nonce COLLATE pg_catalog.invidious);

  playlist_videos.sql: |
    -- Table: public.playlist_videos

    -- DROP TABLE public.playlist_videos;

    CREATE TABLE IF NOT EXISTS public.playlist_videos
    (
        title text,
        id text,
        author text,
        ucid text,
        length_seconds integer,
        published timestamptz,
        plid text references playlists(id),
        index int8,
        live_now boolean,
        PRIMARY KEY (index,plid)
    );

    GRANT ALL ON TABLE public.playlist_videos TO current_user;
  playlists.sql: |
    -- Type: public.privacy

    -- DROP TYPE public.privacy;

    CREATE TYPE public.privacy AS ENUM
    (
        'Public',
        'Unlisted',
        'Private'
    );

    -- Table: public.playlists

    -- DROP TABLE public.playlists;

    CREATE TABLE IF NOT EXISTS public.playlists
    (
        title text,
        id text primary key,
        author text,
        description text,
        video_count integer,
        created timestamptz,
        updated timestamptz,
        privacy privacy,
        index int8[]
    );

    GRANT ALL ON public.playlists TO current_user;
  session_ids.sql: |+
    -- Table: public.session_ids

    -- DROP TABLE public.session_ids;

    CREATE TABLE IF NOT EXISTS public.session_ids
    (
      id text NOT NULL,
      email text,
      issued timestamp with time zone,
      CONSTRAINT session_ids_pkey PRIMARY KEY (id)
    );

    GRANT ALL ON TABLE public.session_ids TO current_user;

    -- Index: public.session_ids_id_idx

    -- DROP INDEX public.session_ids_id_idx;

    CREATE INDEX IF NOT EXISTS session_ids_id_idx
      ON public.session_ids
      USING btree
      (id COLLATE pg_catalog.invidious);

  users.sql: |+
    -- Table: public.users

    -- DROP TABLE public.users;

    CREATE TABLE IF NOT EXISTS public.users
    (
      updated timestamp with time zone,
      notifications text[],
      subscriptions text[],
      email text NOT NULL,
      preferences text,
      password text,
      token text,
      watched text[],
      feed_needs_update boolean,
      CONSTRAINT users_email_key UNIQUE (email)
    );

    GRANT ALL ON TABLE public.users TO current_user;

    -- Index: public.email_unique_idx

    -- DROP INDEX public.email_unique_idx;

    CREATE UNIQUE INDEX IF NOT EXISTS email_unique_idx
      ON public.users
      USING btree
      (lower(email) COLLATE pg_catalog.invidious);

  videos.sql: |+
    -- Table: public.videos

    -- DROP TABLE public.videos;

    CREATE UNLOGGED TABLE IF NOT EXISTS public.videos
    (
      id text NOT NULL,
      info text,
      updated timestamp with time zone,
      CONSTRAINT videos_pkey PRIMARY KEY (id)
    );

    GRANT ALL ON TABLE public.videos TO current_user;

    -- Index: public.id_idx

    -- DROP INDEX public.id_idx;

    CREATE UNIQUE INDEX IF NOT EXISTS id_idx
      ON public.videos
      USING btree
      (id COLLATE pg_catalog.invidious);
---
apiVersion: v1
kind: Service
metadata:
  name: invidious-postgresql-hl
  namespace: invidious
  labels:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: invidious/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: invidious-postgresql
  namespace: invidious
  labels:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: invidious/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: invidious
  labels:
    helm.sh/chart: invidious-2.0.4
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/version: "v2.20240427"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: invidious
---
# Source: invidious/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invidious
  labels:
    helm.sh/chart: invidious-2.0.4
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/version: "v2.20240427"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: invidious
      app.kubernetes.io/instance: invidious
  template:
    metadata:
      labels:
        helm.sh/chart: invidious-2.0.4
        app.kubernetes.io/name: invidious
        app.kubernetes.io/instance: invidious
        app.kubernetes.io/version: "v2.20240427"
        app.kubernetes.io/managed-by: Helm
    spec:
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-for-postgresql
          image: actions/pg_isready
          command:
            - /bin/bash
            - -c
            - 'until pg_isready -h "invidious-postgresql" -p "5432" -U "kemal"; do echo waiting for database; sleep 2; done'
      containers:
        - name: invidious
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: "quay.io/invidious/invidious:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          envFrom:
            - secretRef:
                name: password
          resources:
            {}
          readinessProbe:
            httpGet:
              port: http
              path: /
          livenessProbe:
            httpGet:
              port: http
              path: /
          startupProbe:
            httpGet:
              port: http
              path: /
            periodSeconds: 5
            failureThreshold: 30
      restartPolicy: Always
---
# Source: invidious/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: invidious-postgresql
  namespace: invidious
  labels:
    app.kubernetes.io/instance: invidious
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: invidious-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: invidious
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: invidious-postgresql
      labels:
        app.kubernetes.io/instance: invidious
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-14.3.3
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: invidious-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: invidious
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "kemal"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: invidious-configsecrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: invidious-configsecrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DATABASE
              value: "invidious"
            # Replication
            # Initdb
            - name: POSTGRES_INITSCRIPTS_PASSWORD
              value: "kemal"
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "kemal" -d "dbname=invidious" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "kemal" -d "dbname=invidious" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: custom-init-scripts
          configMap:
            name: invidious-postgresql-init
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
        persistentVolumeClaim:
          claimName: invidious-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres
  name: invidious-data
  namespace: invidious
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi
