---
kind: Namespace
apiVersion: v1
metadata:
  name: media
---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin
  namespace: media
  labels:
    app.kubernetes.io/name: jellyfin
spec:
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8096
      targetPort: 8096
  selector:
    app.kubernetes.io/name: jellyfin
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jellyfin-downloads
  namespace: media
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: jellyfin-config
  name: jellyfin-config
  namespace: media
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: media
  labels:
    app.kubernetes.io/name: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jellyfin
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
  template:
    metadata:
      namespace: media
      labels:
        app.kubernetes.io/name: jellyfin
    spec:
      restartPolicy: Always
      runtimeClassName: nvidia
      containers:
        - name: jellyfin
          image: jellyfin/jellyfin:10.9.9
          resources:
            requests:
              memory: 4096Mi
              cpu: 2000m
            limits:
              memory: 8192Mi
              cpu: 4000m
              # nvidia.com/gpu: 1
          ports:
            - containerPort: 8096
          readinessProbe:
            httpGet:
              path: /health
              port: 8096
            initialDelaySeconds: 10
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health
              port: 8096
            initialDelaySeconds: 30
            periodSeconds: 120
          volumeMounts:
            - name: jellyfin-config
              mountPath: /config
            - name: jellyfin-config
              mountPath: /cache
            - name: jellyfin-downloads
              mountPath: /downloads
      volumes:
        - name: jellyfin-config
          persistentVolumeClaim:
            claimName: jellyfin-config
        - name: jellyfin-cache
          emptyDir: {}
        - name: jellyfin-downloads
          persistentVolumeClaim:
            claimName: jellyfin-downloads
      nodeSelector:
        kubernetes.io/hostname: talos-lab-02
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jellyfin
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: jellyfin.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jellyfin
            port:
              number: 8096
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: jellyfin
  namespace: media
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "jellyfin.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: jellyfin
      port: 8096
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: jellyfin
  namespace: media
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: jellyfin.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr-deployment
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: radarr-config
      - name: appdata
        persistentVolumeClaim:
          claimName: transmission-data
      - name: media
        persistentVolumeClaim:
          claimName: jellyfin-downloads
      containers:
      - name: radarr
        image: binhex/arch-radarr:5.9.1.9070-1-01
        resources:
          requests:
            memory: "4G"
          limits:
            memory: "4G"
        ports:
        - containerPort: 7878
        securityContext:
          privileged: true
        env:
        - name: UMASK
          value: "000"
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        volumeMounts:
        - mountPath: "/config"   # Adjusted mount path
          name: config
        - mountPath: "/var/lib/transmission-daemon/downloads"
          name: appdata
        - mountPath: "/media"    # Adjusted mount path
          name: media
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: radarr
  name: radarr-config
  namespace: media
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: radarr-service
  namespace: media
spec:
  selector:
    app: radarr
  type: LoadBalancer
  ports:
    - name: http
      protocol: TCP
      port: 7878
      targetPort: 7878
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: radarr
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: radarr.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radarr-service
            port:
              number: 7878
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: radarr
  namespace: media
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "radarr.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: radarr-service
      port: 7878
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: radarr
  namespace: media
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: radarr.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: transmission
  namespace: media
  labels:
    app.kubernetes.io/part-of: transmission
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        TRANSMISSION_VAR_VPNCODE: "{{ .ACTIVATION_CODE }}"
        TRANSMISSION_VAR_USERNAME: "{{ .user_name }}"
        TRANSMISSION_VAR_PASSWORD: "{{ .pass_word }}"
  data:
    - secretKey: ACTIVATION_CODE
      remoteRef:
        key: transmission
        property: vpn_code
    - secretKey: user_name
      remoteRef:
        key: transmission
        property: username
    - secretKey: pass_word
      remoteRef:
        key: transmission
        property: t_password
---
apiVersion: v1
kind: Service
metadata:
  name: transmission
  namespace: media
spec:
  type: LoadBalancer
  selector:
    app: expressvpn-transmission   # Corrected label selector to match the Deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9091            # Ensure this matches the port your application listens on
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expressvpn-transmission
  namespace: media
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: expressvpn-transmission
  template:
    metadata:
      labels:
        app: expressvpn-transmission
    spec:
      containers:
      - name: expressvpn-transmission
        image: polkaned/expressvpn-transmission
        volumeMounts:
        - name: transmission-data
          mountPath: /var/lib/transmission-daemon/downloads
        env:
        - name: ACTIVATION_CODE
          valueFrom:
            secretKeyRef:
              name: transmission
              key: TRANSMISSION_VAR_VPNCODE
        - name: T_ALLOWED
          value: 127.0.0.1,192.168.*.*,10.*.*.*
        - name: T_USERNAME
          valueFrom:  
            secretKeyRef:
              name: transmission
              key: TRANSMISSION_VAR_USERNAME
        - name: T_PASSWORD
          valueFrom:  
            secretKeyRef:
              name: transmission
              key: TRANSMISSION_VAR_PASSWORD
        securityContext:
          privileged: true
          capabilities:
            add:
              - NET_ADMIN
        ports:
        - containerPort: 9091 
      volumes:
      - name: transmission-data
        persistentVolumeClaim:
          claimName: transmission-data
--- 
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: transmission-data
  namespace: media
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 800Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: transmission
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: transmission.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: transmission
            port:
              number: 9091
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: transmission
  namespace: media
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "transmission.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: transmission
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: transmission
  namespace: media
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: transmission.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: media
  annotations:
    link.argocd.argoproj.io/external-link: http://prowlarr
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      containers:
        - name: prowlarr
          image: ghcr.io/hotio/prowlarr:release-1.19.0.4568 
          envFrom:
            - configMapRef:
                name: prowlarr-cm
          securityContext:
            allowPrivilegeEscalation: true
          ports:
            - name: web
              containerPort: 9696
              protocol: TCP
          resources:
            limits:
              cpu: 350m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: prowlarr-storage

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prowlarr-cm
  namespace: media
data:
  TZ: "America/New_York"
  PUID: "1000"
  PGID: "1000"
  UMASK: "002"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: prowlarr
  name: prowlarr-storage
  namespace: media
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: prowlarr-service
  namespace: media
spec:
  selector:
    app: prowlarr
  type: LoadBalancer
  ports:
    - name: http
      protocol: TCP
      port: 9696
      targetPort: 9696
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unpackerr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: unpackerr
  template:
    metadata:
      labels:
        app: unpackerr
    spec:
      volumes:
      - name: transmission-downloads
        persistentVolumeClaim:
          claimName: transmission-data
      containers:
      - name: unpackerr
        image: golift/unpackerr:0.14.5
        env:
        - name: TZ
          value: America/New_York
        - name: UN_RADARR_0_URL
          value: "http://192.168.1.167:7878"
        - name: UN_RADARR_0_PATHS_0
          value: "/var/lib/transmission-daemon/downloads"
        - name: UN_RADARR_0_API_KEY
          valueFrom:
            secretKeyRef:
              name: media-configsecrets
              key: MEDIA_VAR_RADARR_API
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: transmission-downloads
          mountPath: "/var/lib/transmission-daemon/downloads"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: unpackerr
  name: unpackerr-config
  namespace: media
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: media-configsecrets
  namespace: media
  labels:
    app.kubernetes.io/part-of: homepage
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        MEDIA_VAR_RADARR_API: "{{ .radarr_api }}"
  data:
    - secretKey: radarr_api
      remoteRef:
        key: media-configsecrets
        property: radarrapi
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: plex
  namespace: media
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: plex
  template:
    metadata:
      labels:
        app: plex
    spec:
      nodeSelector:
        kubernetes.io/hostname: talos-lab-02
      securityContext:
        runAsNonRoot: true
        runAsUser: 2501
        runAsGroup: 2501
        fsGroup: 2501
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [ 44, 104 ]
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: plex
          image: ghcr.io/onedr0p/plex-beta:1.40.5.8854-f36c552fd@sha256:483bb8b03110e6874b2eea984c15039b7423d01c9fd5b436807aa14fe46ba0f2
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: [ "ALL" ]
          env:
            - name: TZ
              value: America_New_York
            - name: PLEX_ADVERTISE_URL
              value: https://plex.<path:stringreplacesecret#domain>,https://192.168.1.172:32400
          resources:
            requests:
              cpu: 500m
              memory: 2Gi
            limits:
              cpu: 6000m
              memory: 8Gi
          # envFrom:
          #   - configMapRef:
          #       name: plex-env
          ports:
            - name: http
              containerPort: 32400
          volumeMounts:
            - name: config
              mountPath: /config
            - name: media
              mountPath: /mnt/media
            - name: transcode
              mountPath: /transcode
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: plex-config
        - name: media
          persistentVolumeClaim:
            claimName: jellyfin-downloads
        - name: transcode
          emptyDir:
            medium: Memory
        - name: tmp
          emptyDir:
            medium: Memory
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: plex-config
  namespace: media
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 12G
---
apiVersion: v1
kind: Service
metadata:
  name: plex
  namespace: media
spec:
  type: LoadBalancer
  selector:
    app: plex
  ports:
    - name: web
      port: 32400
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: plex
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
  - host: plex.<path:stringreplacesecret#domain>
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: plex
            port:
              number: 32400
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: plex
  namespace: media
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "plex.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: plex
      port: 32400
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: plex
  namespace: media
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: plex.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"