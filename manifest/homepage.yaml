---
kind: Namespace
apiVersion: v1
metadata:
  name: homepage
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: homepage-configsecrets
  namespace: homepage
  labels:
    app.kubernetes.io/part-of: homepage
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        HOMEPAGE_VAR_WEATHER_API: "{{ .weather }}"
        HOMEPAGE_VAR_WEATHER_LATITUDE: "{{ .latitude }}"
        HOMEPAGE_VAR_WEATHER_LONGITUDE: "{{ .longitude }}"
        HOMEPAGE_VAR_CLOUDFLARE_TUNNEL_ID: "{{ .cloudflare_tunnel_id }}"
        HOMEPAGE_VAR_CLOUDFLARE_TOKEN: "{{ .cloudflare_token_id }}"
        HOMEPAGE_VAR_CLOUDFLARE_ACCOUNT_ID: "{{ .cloudflare_account_id }}"
        HOMEPAGE_VAR_HASS_TOKEN: "{{ .hass }}"
        HOMEPAGE_VAR_PROXMOX_TOKEN_ID: "{{ .proxmox_token_id_00 }}"
        HOMEPAGE_VAR_PROXMOX_PASSWORD: "{{ .proxmox_password_00 }}"
        HOMEPAGE_VAR_UNIFI_USERNAME:  "{{ .unifi_user }}"
        HOMEPAGE_VAR_UNIFI_PASSWORD:  "{{ .unifi_pass }}"
        HOMEPAGE_VAR_TRUENAS_TOKEN: "{{ .truenas_token }}"
  data:
    - secretKey: weather
      remoteRef:
        key: homepage-configsecrets
        property: weather_api
    - secretKey: latitude
      remoteRef:
        key: homepage-configsecrets
        property: weather_latitude
    - secretKey: longitude
      remoteRef:
        key: homepage-configsecrets
        property: weather_longitude
    - secretKey: hass 
      remoteRef:
        key: homepage-configsecrets
        property: home-assistant
    - secretKey: cloudflare_tunnel_id
      remoteRef:
        key: homepage-configsecrets
        property: cloudflare_tunnelid 
    - secretKey: cloudflare_token_id
      remoteRef:
        key: homepage-configsecrets
        property: cloudflare_token
    - secretKey: cloudflare_account_id
      remoteRef:
        key: homepage-configsecrets
        property: cloudflare_accountid
    - secretKey: proxmox_token_id_00
      remoteRef:
        key: homepage-configsecrets
        property: proxmox_token
    - secretKey: proxmox_password_00
      remoteRef:
        key: homepage-configsecrets
        property: proxmox_password
    - secretKey: truenas_token
      remoteRef:
        key: homepage-configsecrets
        property: TRUENAS_TOKEN
    - secretKey: unifi_user
      remoteRef:
        key: homepage-configsecrets
        property: UNIFI_USER
    - secretKey: unifi_pass
      remoteRef:
        key: homepage-configsecrets
        property: UNIFI_PASS
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: homepage
  namespace: homepage
  labels:
    app.kubernetes.io/name: homepage
secrets:
  - name: homepage
---
apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
  name: homepage
  namespace: homepage
  labels:
    app.kubernetes.io/name: homepage
  annotations:
    kubernetes.io/service-account.name: homepage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: homepage
  namespace: homepage
  labels:
    app.kubernetes.io/name: homepage
data:
  kubernetes.yaml: |
    mode: cluster
  settings.yaml: |
    providers:
      longhorn:
        url: https://lh.<path:stringreplacesecret#domain>
    background:
      image: https://wallpaperset.com/w/full/4/6/d/24497.jpg
      blur: sm # sm, "", md, xl... see https://tailwindcss.com/docs/backdrop-blur
      saturate: 50 # 0, 50, 100... see https://tailwindcss.com/docs/backdrop-saturate
      brightness: 50 # 0, 50, 75... see https://tailwindcss.com/docs/backdrop-brightness
      opacity: 50 # 0-100
  custom.css: ""
  custom.js: ""
  bookmarks.yaml: |
    - Developer:
        - Github:
            - abbr: GH
              href: https://github.com/
  services.yaml: |
    - Calendar:
        - Agenda:
            widget:
              type: calendar
              firstDayInWeek: sunday
              view: monthly 
              maxEvents: 10 
              showTime: true
              timezone: America/New_York 
              integrations: 
                - type: ical 
                  url: https://calendar.google.com/calendar/ical/mp2281%40gmail.com/public/basic.ics
                  name: My Events
                  color: zinc
                  params:
                    showName: true
    - Self-hosted:
        - Home Assistant:
            href: http://hass.<path:stringreplacesecret#domain>:8123
            icon: home-assistant.svg
            widget:
              type: homeassistant
              url: http://hass.<path:stringreplacesecret#domain>:8123
              key: {{HOMEPAGE_VAR_HASS_TOKEN}}
        - Immich:
            href: https://immich.<path:stringreplacesecret#domain>
            icon: immich.svg
            widget:
              type: immich
              url: https://immich.<path:stringreplacesecret#domain>
              key: EFb2ZdHJBUHFPu9ytBnAGM2XVNrzDUOM3inAGxHAQE
        - Radarr:
            href: https://radarr.<path:stringreplacesecret#domain>
            icon: radarr.svg
            widget:
              type: radarr
              url: https://radarr.<path:stringreplacesecret#domain>
              key: 796b04c3f2124c7ca24429d8223fc910
              enableQueue: true
        - Jellyfin:
            href: https://jellyfin.<path:stringreplacesecret#domain>
            icon: jellyfin.svg
            widget:
              type: jellyfin
              url: https://jellyfin.<path:stringreplacesecret#domain>
              key: 23cf7b9449d84421b0566f54b4b62b47
              enableBlocks: true # optional, defaults to false
              enableNowPlaying: true # optional, defaults to true
              enableUser: true # optional, defaults to false
              showEpisodeNumber: true # optional, defaults to false
              expandOneStreamToTwoRows: false # optional, defaults to true
    - Infrastructure:
        - Unifi:
            href: https://unifi.<path:stringreplacesecret#domain>
            icon: unifi.png
            description: Unifi Dashboard
            widget:
              type: unifi
              url: https://unifi.<path:stringreplacesecret#domain>
              username: {{HOMEPAGE_VAR_UNIFI_USERNAME}}
              password: {{HOMEPAGE_VAR_UNIFI_PASSWORD}}
        - TrueNAS:
            href: https://truenas.<path:stringreplacesecret#domain>
            icon: truenas.png
            description: NAS
            widget:
              type: truenas
              url: https://truenas.<path:stringreplacesecret#domain>
              key: {{HOMEPAGE_VAR_TRUENAS_TOKEN}}
              enablePools: true
        - Proxmox:
            href: https://proxmox00.<path:stringreplacesecret#domain>:8006
            icon: proxmox.png
            description: Hypervisor
            widget:
              type: proxmox
              url: https://proxmox00.<path:stringreplacesecret#domain>:8006
              username: {{HOMEPAGE_VAR_PROXMOX_TOKEN_ID}}
              password: {{HOMEPAGE_VAR_PROXMOX_PASSWORD}}
  widgets.yaml: |
    - kubernetes:  
        cluster:
          show: true
          cpu: true
          memory: true
          showLabel: true
          label: "Kubernetes"
        nodes:
          show: true
          cpu: true
          memory: true
          showLabel: true
    - longhorn:
        expanded: true
        total: true
        labels: true
        nodes: false
    - search:
        provider: duckduckgo
        target: _blank
    - openweathermap:
        latitude: {{HOMEPAGE_VAR_WEATHER_LATITUDE}}
        longitude: {{HOMEPAGE_VAR_WEATHER_LONGITUDE}}
        units: imperial # 
        provider: openweathermap
        apiKey: {{HOMEPAGE_VAR_WEATHER_API}}
        cache: 5 
        format: # optional, Intl.NumberFormat options
          maximumFractionDigits: 1
    - datetime:
        text_size: l
        format:
          timeStyle: short
          dateStyle: short
          hourCycle: h23
  docker.yaml: ""
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: homepage
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
      - networking.k8s.io
    resources:
      - ingressroutes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - metrics.k8s.io
    resources:
      - nodes
      - pods
    verbs:
      - get
      - list
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions/status
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: homepage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: homepage
subjects:
  - kind: ServiceAccount
    name: homepage
    namespace: homepage
---
apiVersion: v1
kind: Service
metadata:
  name: homepage
  namespace: homepage
  labels:
    app.kubernetes.io/name: homepage
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  selector:
    app.kubernetes.io/name: homepage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: homepage
  namespace: homepage
  labels:
    app.kubernetes.io/name: homepage
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: homepage
  template:
    metadata:
      labels:
        app.kubernetes.io/name: homepage
    spec:
      serviceAccountName: homepage
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: homepage
          image: "ghcr.io/gethomepage/homepage:latest"
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: homepage-configsecrets
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - mountPath: /app/config/custom.js
              name: homepage-config
              subPath: custom.js
            - mountPath: /app/config/custom.css
              name: homepage-config
              subPath: custom.css
            - mountPath: /app/config/bookmarks.yaml
              name: homepage-config
              subPath: bookmarks.yaml
            - mountPath: /app/config/docker.yaml
              name: homepage-config
              subPath: docker.yaml
            - mountPath: /app/config/kubernetes.yaml
              name: homepage-config
              subPath: kubernetes.yaml
            - mountPath: /app/config/services.yaml
              name: homepage-config
              subPath: services.yaml
            - mountPath: /app/config/settings.yaml
              name: homepage-config
              subPath: settings.yaml
            - mountPath: /app/config/widgets.yaml
              name: homepage-config
              subPath: widgets.yaml
            - mountPath: /app/config/logs
              name: logs
      volumes:
        - name: homepage-config
          configMap:
            name: homepage
        - name: logs
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homepage
  namespace: homepage
  labels:
    # app.kubernetes.io/name: homepage
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  ingressClassName: ingress-nginx-internal
  rules:
    - host: "homepage.<path:stringreplacesecret#domain>"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: homepage
                port:
                  number: 3000
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: homepage
  namespace: homepage
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "homepage.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: homepage
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: homepage
  namespace: homepage
  annotations:
    external-dns.custom/type: private
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  endpoints:
    - dnsName: homepage.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"